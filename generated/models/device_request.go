// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceRequest device request
//
// swagger:model DeviceRequest
type DeviceRequest struct {

	// commands
	Commands []*Command `json:"commands"`

	// device cookie
	DeviceCookie Cookie `json:"deviceCookie,omitempty"`

	// external device Id
	// Required: true
	// Max Length: 256
	ExternalDeviceID *string `json:"externalDeviceId"`
}

// Validate validates this device request
func (m *DeviceRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommands(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceCookie(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceRequest) validateCommands(formats strfmt.Registry) error {

	if swag.IsZero(m.Commands) { // not required
		return nil
	}

	for i := 0; i < len(m.Commands); i++ {
		if swag.IsZero(m.Commands[i]) { // not required
			continue
		}

		if m.Commands[i] != nil {
			if err := m.Commands[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceRequest) validateDeviceCookie(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceCookie) { // not required
		return nil
	}

	if err := m.DeviceCookie.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deviceCookie")
		}
		return err
	}

	return nil
}

func (m *DeviceRequest) validateExternalDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("externalDeviceId", "body", m.ExternalDeviceID); err != nil {
		return err
	}

	if err := validate.MaxLength("externalDeviceId", "body", string(*m.ExternalDeviceID), 256); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceRequest) UnmarshalBinary(b []byte) error {
	var res DeviceRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
