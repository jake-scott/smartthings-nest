// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CallbackUrls callback urls
//
// swagger:model CallbackUrls
type CallbackUrls struct {

	// oauth token
	// Required: true
	// Max Length: 256
	OauthToken *string `json:"oauthToken"`

	// state callback
	// Required: true
	// Max Length: 256
	StateCallback *string `json:"stateCallback"`
}

// Validate validates this callback urls
func (m *CallbackUrls) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOauthToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateCallback(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CallbackUrls) validateOauthToken(formats strfmt.Registry) error {

	if err := validate.Required("oauthToken", "body", m.OauthToken); err != nil {
		return err
	}

	if err := validate.MaxLength("oauthToken", "body", string(*m.OauthToken), 256); err != nil {
		return err
	}

	return nil
}

func (m *CallbackUrls) validateStateCallback(formats strfmt.Registry) error {

	if err := validate.Required("stateCallback", "body", m.StateCallback); err != nil {
		return err
	}

	if err := validate.MaxLength("stateCallback", "body", string(*m.StateCallback), 256); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CallbackUrls) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CallbackUrls) UnmarshalBinary(b []byte) error {
	var res CallbackUrls
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
