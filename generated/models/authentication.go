// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Authentication authentication
//
// swagger:model Authentication
type Authentication struct {

	// token
	// Required: true
	// Max Length: 4096
	Token *string `json:"token"`

	// token type
	// Required: true
	// Enum: [Bearer]
	TokenType *string `json:"tokenType"`
}

// Validate validates this authentication
func (m *Authentication) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Authentication) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("token", "body", m.Token); err != nil {
		return err
	}

	if err := validate.MaxLength("token", "body", string(*m.Token), 4096); err != nil {
		return err
	}

	return nil
}

var authenticationTypeTokenTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Bearer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		authenticationTypeTokenTypePropEnum = append(authenticationTypeTokenTypePropEnum, v)
	}
}

const (

	// AuthenticationTokenTypeBearer captures enum value "Bearer"
	AuthenticationTokenTypeBearer string = "Bearer"
)

// prop value enum
func (m *Authentication) validateTokenTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, authenticationTypeTokenTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Authentication) validateTokenType(formats strfmt.Registry) error {

	if err := validate.Required("tokenType", "body", m.TokenType); err != nil {
		return err
	}

	// value enum
	if err := m.validateTokenTypeEnum("tokenType", "body", *m.TokenType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Authentication) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Authentication) UnmarshalBinary(b []byte) error {
	var res Authentication
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
