// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccessTokenRequest access token request
//
// swagger:model AccessTokenRequest
type AccessTokenRequest struct {

	// callback authentication
	// Required: true
	CallbackAuthentication *AccessTokenRequestCallbackAuthentication `json:"callbackAuthentication"`

	// headers
	// Required: true
	Headers *Headers `json:"headers"`
}

// Validate validates this access token request
func (m *AccessTokenRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCallbackAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeaders(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccessTokenRequest) validateCallbackAuthentication(formats strfmt.Registry) error {

	if err := validate.Required("callbackAuthentication", "body", m.CallbackAuthentication); err != nil {
		return err
	}

	if m.CallbackAuthentication != nil {
		if err := m.CallbackAuthentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("callbackAuthentication")
			}
			return err
		}
	}

	return nil
}

func (m *AccessTokenRequest) validateHeaders(formats strfmt.Registry) error {

	if err := validate.Required("headers", "body", m.Headers); err != nil {
		return err
	}

	if m.Headers != nil {
		if err := m.Headers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headers")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccessTokenRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccessTokenRequest) UnmarshalBinary(b []byte) error {
	var res AccessTokenRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AccessTokenRequestCallbackAuthentication access token request callback authentication
//
// swagger:model AccessTokenRequestCallbackAuthentication
type AccessTokenRequestCallbackAuthentication struct {

	// client Id
	// Required: true
	// Max Length: 100
	ClientID *string `json:"clientId"`

	// client secret
	// Required: true
	// Max Length: 100
	ClientSecret *string `json:"clientSecret"`

	// code
	// Required: true
	// Max Length: 100
	Code *string `json:"code"`

	// grant type
	// Required: true
	// Enum: [authorization_code]
	GrantType *string `json:"grantType"`
}

// Validate validates this access token request callback authentication
func (m *AccessTokenRequestCallbackAuthentication) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrantType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccessTokenRequestCallbackAuthentication) validateClientID(formats strfmt.Registry) error {

	if err := validate.Required("callbackAuthentication"+"."+"clientId", "body", m.ClientID); err != nil {
		return err
	}

	if err := validate.MaxLength("callbackAuthentication"+"."+"clientId", "body", string(*m.ClientID), 100); err != nil {
		return err
	}

	return nil
}

func (m *AccessTokenRequestCallbackAuthentication) validateClientSecret(formats strfmt.Registry) error {

	if err := validate.Required("callbackAuthentication"+"."+"clientSecret", "body", m.ClientSecret); err != nil {
		return err
	}

	if err := validate.MaxLength("callbackAuthentication"+"."+"clientSecret", "body", string(*m.ClientSecret), 100); err != nil {
		return err
	}

	return nil
}

func (m *AccessTokenRequestCallbackAuthentication) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("callbackAuthentication"+"."+"code", "body", m.Code); err != nil {
		return err
	}

	if err := validate.MaxLength("callbackAuthentication"+"."+"code", "body", string(*m.Code), 100); err != nil {
		return err
	}

	return nil
}

var accessTokenRequestCallbackAuthenticationTypeGrantTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["authorization_code"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accessTokenRequestCallbackAuthenticationTypeGrantTypePropEnum = append(accessTokenRequestCallbackAuthenticationTypeGrantTypePropEnum, v)
	}
}

const (

	// AccessTokenRequestCallbackAuthenticationGrantTypeAuthorizationCode captures enum value "authorization_code"
	AccessTokenRequestCallbackAuthenticationGrantTypeAuthorizationCode string = "authorization_code"
)

// prop value enum
func (m *AccessTokenRequestCallbackAuthentication) validateGrantTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, accessTokenRequestCallbackAuthenticationTypeGrantTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AccessTokenRequestCallbackAuthentication) validateGrantType(formats strfmt.Registry) error {

	if err := validate.Required("callbackAuthentication"+"."+"grantType", "body", m.GrantType); err != nil {
		return err
	}

	// value enum
	if err := m.validateGrantTypeEnum("callbackAuthentication"+"."+"grantType", "body", *m.GrantType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccessTokenRequestCallbackAuthentication) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccessTokenRequestCallbackAuthentication) UnmarshalBinary(b []byte) error {
	var res AccessTokenRequestCallbackAuthentication
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
