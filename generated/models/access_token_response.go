// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccessTokenResponse access token response
//
// swagger:model AccessTokenResponse
type AccessTokenResponse struct {

	// callback authentication
	// Required: true
	CallbackAuthentication *AccessTokenResponseCallbackAuthentication `json:"callbackAuthentication"`

	// headers
	// Required: true
	Headers *Headers `json:"headers"`
}

// Validate validates this access token response
func (m *AccessTokenResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCallbackAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeaders(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccessTokenResponse) validateCallbackAuthentication(formats strfmt.Registry) error {

	if err := validate.Required("callbackAuthentication", "body", m.CallbackAuthentication); err != nil {
		return err
	}

	if m.CallbackAuthentication != nil {
		if err := m.CallbackAuthentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("callbackAuthentication")
			}
			return err
		}
	}

	return nil
}

func (m *AccessTokenResponse) validateHeaders(formats strfmt.Registry) error {

	if err := validate.Required("headers", "body", m.Headers); err != nil {
		return err
	}

	if m.Headers != nil {
		if err := m.Headers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headers")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccessTokenResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccessTokenResponse) UnmarshalBinary(b []byte) error {
	var res AccessTokenResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AccessTokenResponseCallbackAuthentication access token response callback authentication
//
// swagger:model AccessTokenResponseCallbackAuthentication
type AccessTokenResponseCallbackAuthentication struct {

	// access token
	// Required: true
	// Max Length: 4096
	AccessToken *string `json:"accessToken"`

	// expires in
	// Required: true
	// Maximum: 3.1536e+08
	ExpiresIn *int64 `json:"expiresIn"`

	// refresh token
	// Required: true
	// Max Length: 4096
	RefreshToken *string `json:"refreshToken"`

	// token type
	// Required: true
	// Enum: [Bearer]
	TokenType *string `json:"tokenType"`
}

// Validate validates this access token response callback authentication
func (m *AccessTokenResponseCallbackAuthentication) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiresIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefreshToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccessTokenResponseCallbackAuthentication) validateAccessToken(formats strfmt.Registry) error {

	if err := validate.Required("callbackAuthentication"+"."+"accessToken", "body", m.AccessToken); err != nil {
		return err
	}

	if err := validate.MaxLength("callbackAuthentication"+"."+"accessToken", "body", string(*m.AccessToken), 4096); err != nil {
		return err
	}

	return nil
}

func (m *AccessTokenResponseCallbackAuthentication) validateExpiresIn(formats strfmt.Registry) error {

	if err := validate.Required("callbackAuthentication"+"."+"expiresIn", "body", m.ExpiresIn); err != nil {
		return err
	}

	if err := validate.MaximumInt("callbackAuthentication"+"."+"expiresIn", "body", int64(*m.ExpiresIn), 3.1536e+08, false); err != nil {
		return err
	}

	return nil
}

func (m *AccessTokenResponseCallbackAuthentication) validateRefreshToken(formats strfmt.Registry) error {

	if err := validate.Required("callbackAuthentication"+"."+"refreshToken", "body", m.RefreshToken); err != nil {
		return err
	}

	if err := validate.MaxLength("callbackAuthentication"+"."+"refreshToken", "body", string(*m.RefreshToken), 4096); err != nil {
		return err
	}

	return nil
}

var accessTokenResponseCallbackAuthenticationTypeTokenTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Bearer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accessTokenResponseCallbackAuthenticationTypeTokenTypePropEnum = append(accessTokenResponseCallbackAuthenticationTypeTokenTypePropEnum, v)
	}
}

const (

	// AccessTokenResponseCallbackAuthenticationTokenTypeBearer captures enum value "Bearer"
	AccessTokenResponseCallbackAuthenticationTokenTypeBearer string = "Bearer"
)

// prop value enum
func (m *AccessTokenResponseCallbackAuthentication) validateTokenTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, accessTokenResponseCallbackAuthenticationTypeTokenTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AccessTokenResponseCallbackAuthentication) validateTokenType(formats strfmt.Registry) error {

	if err := validate.Required("callbackAuthentication"+"."+"tokenType", "body", m.TokenType); err != nil {
		return err
	}

	// value enum
	if err := m.validateTokenTypeEnum("callbackAuthentication"+"."+"tokenType", "body", *m.TokenType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccessTokenResponseCallbackAuthentication) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccessTokenResponseCallbackAuthentication) UnmarshalBinary(b []byte) error {
	var res AccessTokenResponseCallbackAuthentication
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
