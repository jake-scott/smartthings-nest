// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Headers headers
//
// swagger:model Headers
type Headers struct {

	// interaction type
	// Required: true
	InteractionType InteractionType `json:"interactionType"`

	// request Id
	// Required: true
	// Max Length: 128
	// Pattern: ^[a-zA-Z0-9-+.]+$
	RequestID *string `json:"requestId"`

	// schema
	// Required: true
	// Enum: [st-schema]
	Schema *string `json:"schema"`

	// version
	// Required: true
	// Enum: [1.0]
	Version *string `json:"version"`
}

// Validate validates this headers
func (m *Headers) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInteractionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchema(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Headers) validateInteractionType(formats strfmt.Registry) error {

	if err := m.InteractionType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("interactionType")
		}
		return err
	}

	return nil
}

func (m *Headers) validateRequestID(formats strfmt.Registry) error {

	if err := validate.Required("requestId", "body", m.RequestID); err != nil {
		return err
	}

	if err := validate.MaxLength("requestId", "body", string(*m.RequestID), 128); err != nil {
		return err
	}

	if err := validate.Pattern("requestId", "body", string(*m.RequestID), `^[a-zA-Z0-9-+.]+$`); err != nil {
		return err
	}

	return nil
}

var headersTypeSchemaPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["st-schema"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		headersTypeSchemaPropEnum = append(headersTypeSchemaPropEnum, v)
	}
}

const (

	// HeadersSchemaStSchema captures enum value "st-schema"
	HeadersSchemaStSchema string = "st-schema"
)

// prop value enum
func (m *Headers) validateSchemaEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, headersTypeSchemaPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Headers) validateSchema(formats strfmt.Registry) error {

	if err := validate.Required("schema", "body", m.Schema); err != nil {
		return err
	}

	// value enum
	if err := m.validateSchemaEnum("schema", "body", *m.Schema); err != nil {
		return err
	}

	return nil
}

var headersTypeVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["1.0"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		headersTypeVersionPropEnum = append(headersTypeVersionPropEnum, v)
	}
}

const (

	// HeadersVersionNr10 captures enum value "1.0"
	HeadersVersionNr10 string = "1.0"
)

// prop value enum
func (m *Headers) validateVersionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, headersTypeVersionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Headers) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	// value enum
	if err := m.validateVersionEnum("version", "body", *m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Headers) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Headers) UnmarshalBinary(b []byte) error {
	var res Headers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
