// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GlobalError global error
//
// swagger:model GlobalError
type GlobalError struct {

	// detail
	// Max Length: 100
	Detail string `json:"detail,omitempty"`

	// error enum
	// Required: true
	// Enum: [TOKEN-EXPIRED INTEGRATION-DELETED BAD-REQUEST INVALID-TOKEN INVALID-INTERACTION-TYPE UNSUPPORTED-GRANT-TYPE INVALID-CODE INVALID-CLIENT-SECRET INVALID-CLIENT]
	ErrorEnum *string `json:"errorEnum"`
}

// Validate validates this global error
func (m *GlobalError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorEnum(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GlobalError) validateDetail(formats strfmt.Registry) error {

	if swag.IsZero(m.Detail) { // not required
		return nil
	}

	if err := validate.MaxLength("detail", "body", string(m.Detail), 100); err != nil {
		return err
	}

	return nil
}

var globalErrorTypeErrorEnumPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TOKEN-EXPIRED","INTEGRATION-DELETED","BAD-REQUEST","INVALID-TOKEN","INVALID-INTERACTION-TYPE","UNSUPPORTED-GRANT-TYPE","INVALID-CODE","INVALID-CLIENT-SECRET","INVALID-CLIENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		globalErrorTypeErrorEnumPropEnum = append(globalErrorTypeErrorEnumPropEnum, v)
	}
}

const (

	// GlobalErrorErrorEnumTOKENEXPIRED captures enum value "TOKEN-EXPIRED"
	GlobalErrorErrorEnumTOKENEXPIRED string = "TOKEN-EXPIRED"

	// GlobalErrorErrorEnumINTEGRATIONDELETED captures enum value "INTEGRATION-DELETED"
	GlobalErrorErrorEnumINTEGRATIONDELETED string = "INTEGRATION-DELETED"

	// GlobalErrorErrorEnumBADREQUEST captures enum value "BAD-REQUEST"
	GlobalErrorErrorEnumBADREQUEST string = "BAD-REQUEST"

	// GlobalErrorErrorEnumINVALIDTOKEN captures enum value "INVALID-TOKEN"
	GlobalErrorErrorEnumINVALIDTOKEN string = "INVALID-TOKEN"

	// GlobalErrorErrorEnumINVALIDINTERACTIONTYPE captures enum value "INVALID-INTERACTION-TYPE"
	GlobalErrorErrorEnumINVALIDINTERACTIONTYPE string = "INVALID-INTERACTION-TYPE"

	// GlobalErrorErrorEnumUNSUPPORTEDGRANTTYPE captures enum value "UNSUPPORTED-GRANT-TYPE"
	GlobalErrorErrorEnumUNSUPPORTEDGRANTTYPE string = "UNSUPPORTED-GRANT-TYPE"

	// GlobalErrorErrorEnumINVALIDCODE captures enum value "INVALID-CODE"
	GlobalErrorErrorEnumINVALIDCODE string = "INVALID-CODE"

	// GlobalErrorErrorEnumINVALIDCLIENTSECRET captures enum value "INVALID-CLIENT-SECRET"
	GlobalErrorErrorEnumINVALIDCLIENTSECRET string = "INVALID-CLIENT-SECRET"

	// GlobalErrorErrorEnumINVALIDCLIENT captures enum value "INVALID-CLIENT"
	GlobalErrorErrorEnumINVALIDCLIENT string = "INVALID-CLIENT"
)

// prop value enum
func (m *GlobalError) validateErrorEnumEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, globalErrorTypeErrorEnumPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GlobalError) validateErrorEnum(formats strfmt.Registry) error {

	if err := validate.Required("errorEnum", "body", m.ErrorEnum); err != nil {
		return err
	}

	// value enum
	if err := m.validateErrorEnumEnum("errorEnum", "body", *m.ErrorEnum); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GlobalError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GlobalError) UnmarshalBinary(b []byte) error {
	var res GlobalError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
